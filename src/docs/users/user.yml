paths:
  /api/users:
    get:
      summary: Gets all users
      tags:
        - Users
      security:
        - cookieAuth: []
      responses:
        "200":
          description: The products were obtained successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/User"
        "500":
          description: Internal Server Error
  /api/users/{uid}:
    get:
      summary: Search by id a user
      tags:
        - Users
      security:
        - cookieAuth: []
      parameters:
        - name: uid
          in: path
          required: true
          description: Id of the user to request
          schema:
            $type: String
      responses:
        "200":
          description: The product was found successfully
          content:
            application/json:
              schema:
                $ref: "#components/schemas/User"
        "500":
          description: Internal Server Error
    put:
      summary: Update user by id
      tags:
        - Users
      security:
        - cookieAuth: []
      parameters:
        - name: uid
          in: path
          required: true
          description: Id of the user to request
          schema:
            $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBody/updateUser"
      responses:
        "200":
          description: The user was successfully updated
        "500":
          description: Internal Server Error

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Id automatically generated by mongoDB
        firtsName:
          type: String
          description: First name of the user
        lastName:
          type: String
          description: Second name of the user
        email:
          type: String
          description: User email
        userName:
          type: String
          description: User nickname
        password:
          type: String
          description: User password
        cart:
          type: ObjectID
          description: Id automatically generated by mongoDB
        birthDate:
          type: Date
          description: User's date of birth
        role:
          type: String
          description: User role
      example:
        _id: ObjectId('36436jc565745w9020t')
        firtsName: Andres
        lastName: SoyYo
        email: andy@gmail.com
        userName: andykiller
        password: baires123
        cart: ObjectId('3611wsr345w9020t')
        birthDate: 01-03-1997
        role: premium
  requestBody:
    updateUser:
      type: object
      properties:
        firtsName:
          type: String
          description: First name of the user
        lastName:
          type: String
          description: Second name of the user
        email:
          type: Number
          description: User email
        userName:
          type: String
          description: User nickname
        password:
          type: String
          description: User password
        birthDate:
          type: Number
          description: User's date of birth
      example:
        firtsName: federico
        lastName: gonzales
        email: fedegonzales@gmail.com
        userName: fedeGO
        password: gonzales
        birthDate: 01-02-1998
